--
-- Author: 
-- Date: 2017-03-01 10:54:10
--
--工具类
local luaFileVersion = "1.5.1"

local UtilTool = {}

UtilTool.EARTH_RADIUS = 6378137			--赤道半径(单位m)

--转化为弧度(rad) 
function UtilTool:rad(d)
    return d * math.pi / 180.0
end

--[[
	* 基于余弦定理求两经纬度距离 
    * @param lon1 第一点的精度 
    * @param lat1 第一点的纬度 
    * @param lon2 第二点的精度 
    * @param lat3 第二点的纬度 
    * @return 返回的距离，单位km
]]--
function UtilTool:LantitudeLongitudeDist(lon1, lat1, lon2, lat2)
	local radLat1 = UtilTool:rad(lat1)
    local radLat2 = UtilTool:rad(lat2)

    local radLon1 = UtilTool:rad(lon1)
    local radLon2 = UtilTool:rad(lon2)

    if (radLat1 < 0) then
        radLat1 = math.pi / 2 + math.abs(radLat1)		--south
    end
    if (radLat1 > 0) then
        radLat1 = math.pi / 2 - math.abs(radLat1)		--north  
    end
    if (radLon1 < 0) then
        radLon1 = math.pi * 2 - math.abs(radLon1)		--west
    end
    if (radLat2 < 0) then
        radLat2 = math.pi / 2 + math.abs(radLat2)		--south
    end
    if (radLat2 > 0) then
        radLat2 = math.pi / 2 - math.abs(radLat2)		--north
    end
    if (radLon2 < 0) then
        radLon2 = math.pi * 2 - math.abs(radLon2)		--west
    end
    local x1 = UtilTool.EARTH_RADIUS * math.cos(radLon1) * math.sin(radLat1)
    local y1 = UtilTool.EARTH_RADIUS * math.sin(radLon1) * math.sin(radLat1)
    local z1 = UtilTool.EARTH_RADIUS * math.cos(radLat1)

    local x2 = UtilTool.EARTH_RADIUS * math.cos(radLon2) * math.sin(radLat2)
    local y2 = UtilTool.EARTH_RADIUS * math.sin(radLon2) * math.sin(radLat2)
    local z2 = UtilTool.EARTH_RADIUS * math.cos(radLat2)

    local d = math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)+ (z1 - z2) * (z1 - z2));  
    --余弦定理求夹角  
    local theta = math.acos((UtilTool.EARTH_RADIUS * UtilTool.EARTH_RADIUS + UtilTool.EARTH_RADIUS * UtilTool.EARTH_RADIUS - d * d) / (2 * UtilTool.EARTH_RADIUS * UtilTool.EARTH_RADIUS))
    local dist = theta * UtilTool.EARTH_RADIUS
    return dist
end

--保存图片到本地
function UtilTool:saveHeadImageFromWeb(userId, url, image)
--    cclog("saveHeadImageFromWeb: " .. url)
    local strHeadName = string.format("head_%d", userId)
    local strHeadFileName = strHeadName .. ".png"
    local writablePath = cc.FileUtils:getInstance():getWritablePath()
    local strLocalHeadPath = writablePath .. strHeadFileName
    cc.Director:getInstance():getTextureCache():removeTextureForKey(strLocalHeadPath)
    image:saveToFile(strLocalHeadPath)
    cc.UserDefault:getInstance():setStringForKey(strHeadName, url)
end

--判断是否已保存本地图片
function UtilTool:beExistLocalHeadImage(userId, newUrl)
    local strHeadName = string.format("head_%d", userId)
    local strHeadFileName = strHeadName .. ".png"
    local writablePath = cc.FileUtils:getInstance():getWritablePath()
    local strLocalHeadPath = writablePath .. strHeadFileName
    local strLocalHeadUrl = cc.UserDefault:getInstance():getStringForKey(strHeadName, "")

--    cclog("oldUrl: " .. strLocalHeadUrl)
--    cclog("newUrl: " .. newUrl)

    if strLocalHeadUrl ~= newUrl then
--        cclog("beExistLocalHeadImage------>1")
        return false
    else
        if strLocalHeadUrl == "" then
--            cclog("beExistLocalHeadImage------>2")
            return false
        else
--            cclog("beExistLocalHeadImage------>3")
            local sp_goodsItem = cc.Sprite:create(strLocalHeadPath)
            if sp_goodsItem ~= nil then
                return true
            else
                return false
            end
        end
    end
end

--获取本地图片地址
function UtilTool:getLocalHeadImagePath(userId)
    local strHeadName = string.format("head_%d", userId)
    local strHeadFileName = strHeadName .. ".png"
    local writablePath = cc.FileUtils:getInstance():getWritablePath()
    local strLocalHeadPath = writablePath .. strHeadFileName
    local strLocalHeadUrl = cc.UserDefault:getInstance():getStringForKey(strHeadName, "")

    return strLocalHeadPath
end

--保存图片到本地
function UtilTool:saveImageFromWeb(key, url, image)
    local strHeadFileName = key .. ".png"
    local writablePath = cc.FileUtils:getInstance():getWritablePath()
    local strLocalHeadPath = writablePath .. strHeadFileName
    cc.Director:getInstance():getTextureCache():removeTextureForKey(strLocalHeadPath)
    image:saveToFile(strLocalHeadPath)
    cc.UserDefault:getInstance():setStringForKey(key, url)
end

--判断是否已保存本地图片
function UtilTool:beExistLocalImage(key, newUrl)
    local strHeadFileName = key .. ".png"
    local writablePath = cc.FileUtils:getInstance():getWritablePath()
    local strLocalHeadPath = writablePath .. strHeadFileName
    local strLocalHeadUrl = cc.UserDefault:getInstance():getStringForKey(key, "")

--    cclog("oldUrl: " .. strLocalHeadUrl)
--    cclog("newUrl: " .. newUrl)

    if strLocalHeadUrl ~= newUrl then
--        cclog("beExistLocalHeadImage------>1")
        return false
    else
        if strLocalHeadUrl == "" then
--            cclog("beExistLocalHeadImage------>2")
            return false
        else
--            cclog("beExistLocalHeadImage------>3")
            local sp_goodsItem = cc.Sprite:create(strLocalHeadPath)
            if sp_goodsItem ~= nil then
                return true
            else
                return false
            end
        end
    end
end

--获取本地图片地址
function UtilTool:getLocalImagePath(key)
    local strHeadFileName = key .. ".png"
    local writablePath = cc.FileUtils:getInstance():getWritablePath()
    local strLocalHeadPath = writablePath .. strHeadFileName
    local strLocalHeadUrl = cc.UserDefault:getInstance():getStringForKey(key, "")

    return strLocalHeadPath
end

--使精灵变圆
function UtilTool:maskedSprite(textureSprite, strMaskPath)
    local maskSprite = cc.Sprite:create(strMaskPath)
    local renderTexture = cc.RenderTexture:create(maskSprite:getContentSize().width, maskSprite:getContentSize().height)

    maskSprite:setPosition(cc.p(maskSprite:getContentSize().width / 2, maskSprite:getContentSize().height / 2))
    textureSprite:setPosition(cc.p(textureSprite:getContentSize().width / 2 * textureSprite:getScaleX(), textureSprite:getContentSize().height / 2 * textureSprite:getScaleY()))

--    maskSprite:setBlendFunc(GL_ONE, GL_ZERO)
    maskSprite:setBlendFunc({src = GL_ONE, dst = GL_ZERO})
--    textureSprite:setBlendFunc(GL_DST_ALPHA, GL_ZERO)
    textureSprite:setBlendFunc({src = GL_DST_ALPHA, dst = GL_ZERO})

    renderTexture:begin()
    maskSprite:visit()
    textureSprite:visit()
    renderTexture:endToLua()

    local retval = cc.Sprite:createWithTexture(renderTexture:getSprite():getTexture())
    retval:setFlippedY(true)
    return retval
end

--检测输入的账号或密码是否合理
function UtilTool:testZiFuReasonable(strZiFu)
    if strZiFu == nil then
        return false
    end

    local length = string.len(strZiFu)
    for i = 1, length, 1 do
        local reasonable = false
        local zifu_ascii = string.byte(strZiFu, i)

        if (zifu_ascii >= 48) and (zifu_ascii <= 57) then
            --0~9
            reasonable = true
        end

        if (zifu_ascii >= 65) and (zifu_ascii <= 90) then
            --A~Z
            reasonable = true
        end

        if (zifu_ascii >= 97) and (zifu_ascii <= 122) then
            --a~z
            reasonable = true
        end

        if (zifu_ascii == 64) or (zifu_ascii == 46) or (zifu_ascii == 95) then
            --@,.,_
            reasonable = true
        end

        if reasonable == false then
            return false
        end
    end

    return true
end

--检测是否全部为数字
function UtilTool:testZiFuAllNumber(strZiFu)
    if strZiFu == nil then
        return false
    end

    local length = string.len(strZiFu)
    for i = 1, length, 1 do
        local reasonable = false
        local zifu_ascii = string.byte(strZiFu, i)

        if (zifu_ascii >= 48) and (zifu_ascii <= 57) then
            --0~9
            reasonable = true
        end

        if reasonable == false then
            return false
        end
    end

    return true
end

--检测字符串字符个数，中文由3个字符组成，算1个
function UtilTool:testZiFuWidth(strZiFu)
    if strZiFu == nil then
        return 0
    end

    local zifuNum = 0
    local mingziNum = string.len(strZiFu)
    for i = 1, mingziNum do
        local curByte = string.byte(strZiFu, i)
        local byteCount = 1
        
        if curByte>0 and curByte<=127 then
            byteCount = 1

            zifuNum = zifuNum + 1
        elseif curByte>=192 and curByte<223 then
            byteCount = 2

            zifuNum = zifuNum + 1
        elseif curByte>=224 and curByte<239 then
            byteCount = 3

            zifuNum = zifuNum + 1
        elseif curByte>=240 and curByte<=247 then
            byteCount = 4

            zifuNum = zifuNum + 1
        end
         
        local char = string.sub(strZiFu, i, i+byteCount-1)
        i = i + byteCount - 1
    end

    return zifuNum
end

function UtilTool:deepcopy(object)
    local lookup_table = {}
    local function _copy(object)
        if type(object) ~= "table" then
            return object
        elseif lookup_table[object] then
            return lookup_table[object]
        end  -- if
        local new_table = {}
        lookup_table[object] = new_table
        for index, value in pairs(object) do
            new_table[_copy(index)] = _copy(value)
        end
        return setmetatable(new_table, getmetatable(object))
    end
    return _copy(object)
end

function UtilTool:getSpriteFrameLocal(frameName, frameListPath)
--    local spriteFrame = cc.SpriteFrameCache:getInstance():getSpriteFrameByName(frameName)
--    if spriteFrame == nil then
        cc.SpriteFrameCache:getInstance():addSpriteFrames(frameListPath)
        
        local spriteFrame = cc.SpriteFrameCache:getInstance():getSpriteFrame(frameName)
--        local spriteFrame = cc.SpriteFrameCache:getInstance():getSpriteFrameByName(frameName)
--    end

    return spriteFrame
end

function UtilTool:getPersonHeadPath(sex, headIndex, frameIndex)
    frameIndex = frameIndex or 1

    local playerHeadIndex = 1
    if sex == 1 then
        if (headIndex >= 1) and (headIndex <= 6) then
            playerHeadIndex = headIndex * 2
        else
            playerHeadIndex = 1 * 2
        end
        
    else
        if (headIndex >= 1) and (headIndex <= 6) then
            playerHeadIndex = headIndex * 2 - 1
        else
            playerHeadIndex = 1 * 2 - 1
        end
    end

    local strHeadPath = ""
    strHeadPath = string.format("person/personhead/personhead_%d/personhead_%d_%d.png", playerHeadIndex, playerHeadIndex, frameIndex)

    return strHeadPath
end

function UtilTool:getPersonHeadPathHall(sex, headIndex)
    
    local strHeadPath = nil
    if headIndex ~= 0 then
        if sex == 1 then
            strHeadPath = string.format("person/touxiang_%d.png", gameManager.gameData.playerData.cbHeadId * 2)
        else
            strHeadPath = string.format("person/touxiang_%d.png", gameManager.gameData.playerData.cbHeadId * 2 - 1)
        end
    else
        strHeadPath = string.format("person/touxiang_%d.png", 1)
    end

    return strHeadPath
end

function UtilTool.drawNet()
    if not BE_TEST_STATUS then
        return cc.Node:create()
    end

    local glNode  = gl.glNodeCreate()
    local origi = cc.Director:getInstance():getVisibleOrigin()
    local size = cc.Director:getInstance():getWinSize()
    glNode:setContentSize(cc.size(size.width, size.height))
    glNode:setAnchorPoint(cc.p(0, 0))
    local function primitivesDraw(transform, transformUpdated)

        kmGLPushMatrix()
        kmGLLoadMatrix(transform)
        --        cc.DrawPrimitives.setPointSize(4)
        cc.DrawPrimitives.drawColor4B(0,255,255,255)

        for i = 1, 12 do
            cc.DrawPrimitives.drawLine(cc.p(i * 100, 0), cc.p(i * 100, 720))
        end

        for i = 1, 7 do
            cc.DrawPrimitives.drawLine(cc.p(0, i * 100), cc.p(1280, i * 100))
        end

--        cc.DrawPrimitives.drawPoints(location,4) --画点
--        cc.DrawPrimitives.drawLine(prePoint, curPoint )  --画线 
--        for i=1,#m_ptOrbit - 1 do
--            r = math.random(1,255)
--            g = math.random(1,255)
--            b = math.random(1,255)
--            r = r + 1
--            if r == 255 then
--                r = 0
--            end
--            cc.DrawPrimitives.drawLine(m_ptOrbit[i], m_ptOrbit[i+1] )
--            cc.DrawPrimitives.drawColor4B(r,r+50,r+100,255)
--            cc.DrawPrimitives.drawPoint(cc.p(m_ptOrbit[i].x,m_ptOrbit[i].y)) --画点
--            cc.DrawPrimitives.drawColor4B(0,255,255,255)
--
--            --            print(i.."  "..m_ptOrbit[i].x.."  "..m_ptOrbit[i].y)
--        end
        --        print("长度："..#m_ptOrbit)
        kmGLPopMatrix()
    end
    glNode:registerScriptDrawHandler(primitivesDraw)
    return glNode  --  把这个node加到想显示图形的地方  加一次就够了。。。
end

function UtilTool:trim(s)
    return (string.gsub(s, "^%s*(.-)%s*$", "%1")) 
end

function UtilTool:generateGUID()
    math.randomseed(tostring(os.time()))
    
    local seed = {'e','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'}
    local tb = {}
    for i = 1,32 do
        table.insert(tb,seed[math.random(1,16)])
    end
    local sid = table.concat(tb)
    return string.format('%s-%s-%s-%s-%s',
        string.sub(sid,1,8),
        string.sub(sid,9,12),
        string.sub(sid,13,16),
        string.sub(sid,17,20),
        string.sub(sid,21,32)
    )
end


--传入卡号 得到银行名称
function UtilTool:getNameOfBank(idCard)
    --BIN号
    local bankBin = {
        "621098", "622150", "622151", "622181", "622188", "955100", "621095", "620062", "621285", "621798", "621799",
        "621797", "620529", "622199", "621096", "621622", "623219", "621674", "623218", "621599", "370246", "370248",
        "370249", "427010", "427018", "427019", "427020", "427029", "427030", "427039", "370247", "438125", "438126",
        "451804", "451810", "451811", "458071", "489734", "489735", "489736", "510529", "427062", "524091", "427064",
        "530970", "530990", "558360", "620200", "620302", "620402", "620403", "620404", "524047", "620406", "620407",
        "525498", "620409", "620410", "620411", "620412", "620502", "620503", "620405", "620408", "620512", "620602",
        "620604", "620607", "620611", "620612", "620704", "620706", "620707", "620708", "620709", "620710", "620609",
        "620712", "620713", "620714", "620802", "620711", "620904", "620905", "621001", "620902", "621103", "621105",
        "621106", "621107", "621102", "621203", "621204", "621205", "621206", "621207", "621208", "621209", "621210",
        "621302", "621303", "621202", "621305", "621306", "621307", "621309", "621311", "621313", "621211", "621315",
        "621304", "621402", "621404", "621405", "621406", "621407", "621408", "621409", "621410", "621502", "621317",
        "621511", "621602", "621603", "621604", "621605", "621608", "621609", "621610", "621611", "621612", "621613",
        "621614", "621615", "621616", "621617", "621607", "621606", "621804", "621807", "621813", "621814", "621817",
        "621901", "621904", "621905", "621906", "621907", "621908", "621909", "621910", "621911", "621912", "621913",
        "621915", "622002", "621903", "622004", "622005", "622006", "622007", "622008", "622010", "622011", "622012",
        "621914", "622015", "622016", "622003", "622018", "622019", "622020", "622102", "622103", "622104", "622105",
        "622013", "622111", "622114", "622200", "622017", "622202", "622203", "622208", "622210", "622211", "622212",
        "622213", "622214", "622110", "622220", "622223", "622225", "622229", "622230", "622231", "622232", "622233",
        "622234", "622235", "622237", "622215", "622239", "622240", "622245", "622224", "622303", "622304", "622305",
        "622306", "622307", "622308", "622309", "622238", "622314", "622315", "622317", "622302", "622402", "622403",
        "622404", "622313", "622504", "622505", "622509", "622513", "622517", "622502", "622604", "622605", "622606",
        "622510", "622703", "622715", "622806", "622902", "622903", "622706", "623002", "623006", "623008", "623011",
        "623012", "622904", "623015", "623100", "623202", "623301", "623400", "623500", "623602", "623803", "623901",
        "623014", "624100", "624200", "624301", "624402", "62451804", "62451810", "62451811", "62458071", "623700",
        "628288", "624000", "628286", "622206", "621225", "526836", "513685", "543098", "458441", "620058", "621281",
        "622246", "900000", "544210", "548943", "370267", "621558", "621559", "621722", "621723", "620086", "621226",
        "402791", "427028", "427038", "548259", "356879", "356880", "356881", "356882", "528856", "621618", "620516",
        "621227", "621721", "900010", "625330", "625331", "625332", "623062", "622236", "621670", "524374", "550213",
        "374738", "374739", "621288", "625708", "625709", "622597", "622599", "360883", "360884", "625865", "625866",
        "625899", "621376", "620054", "620142", "621428", "625939", "621434", "625987", "621761", "621749", "620184",
        "621300", "621378", "625114", "622159", "621720", "625021", "625022", "621379", "620114", "620146", "621724",
        "625918", "621371", "620143", "620149", "621414", "625914", "621375", "620187", "621433", "625986", "621370",
        "625925", "622926", "622927", "622928", "622929", "622930", "622931", "620124", "620183", "620561", "625116",
        "622227", "621372", "621464", "625942", "622158", "625917", "621765", "620094", "620186", "621719", "621719",
        "621750", "621377", "620148", "620185", "621374", "621731", "621781", "552599", "623206", "621671", "620059",
        "403361", "404117", "404118", "404119", "404120", "404121", "463758", "514027", "519412", "519413", "520082",
        "520083", "558730", "621282", "621336", "621619", "622821", "622822", "622823", "622824", "622825", "622826",
        "622827", "622828", "622836", "622837", "622840", "622841", "622843", "622844", "622845", "622846", "622847",
        "622848", "622849", "623018", "625996", "625997", "625998", "628268", "625826", "625827", "548478", "544243",
        "622820", "622830", "622838", "625336", "628269", "620501", "621660", "621661", "621662", "621663", "621665",
        "621667", "621668", "621669", "621666", "625908", "625910", "625909", "356833", "356835", "409665", "409666",
        "409668", "409669", "409670", "409671", "409672", "456351", "512315", "512316", "512411", "512412", "514957",
        "409667", "518378", "518379", "518474", "518475", "518476", "438088", "524865", "525745", "525746", "547766",
        "552742", "553131", "558868", "514958", "622752", "622753", "622755", "524864", "622757", "622758", "622759",
        "622760", "622761", "622762", "622763", "601382", "622756", "628388", "621256", "621212", "620514", "622754",
        "622764", "518377", "622765", "622788", "621283", "620061", "621725", "620040", "558869", "621330", "621331",
        "621332", "621333", "621297", "377677", "621568", "621569", "625905", "625906", "625907", "628313", "625333",
        "628312", "623208", "621620", "621756", "621757", "621758", "621759", "621785", "621786", "621787", "621788",
        "621789", "621790", "621672", "625337", "625338", "625568", "621648", "621248", "621249", "622750", "622751",
        "622771", "622772", "622770", "625145", "620531", "620210", "620211", "622479", "622480", "622273", "622274",
        "621231", "621638", "621334", "625140", "621395", "622725", "622728", "621284", "421349", "434061", "434062",
        "436728", "436742", "453242", "491031", "524094", "526410", "544033", "552245", "589970", "620060", "621080",
        "621081", "621466", "621467", "621488", "621499", "621598", "621621", "621700", "622280", "622700", "622707",
        "622966", "622988", "625955", "625956", "553242", "621082", "621673", "623211", "356896", "356899", "356895",
        "436718", "436738", "436745", "436748", "489592", "531693", "532450", "532458", "544887", "552801", "557080",
        "558895", "559051", "622166", "622168", "622708", "625964", "625965", "625966", "628266", "628366", "625362",
        "625363", "628316", "628317", "620021", "620521", "405512", "601428", "405512", "434910", "458123", "458124",
        "520169", "522964", "552853", "601428", "622250", "622251", "521899", "622254", "622255", "622256", "622257",
        "622258", "622259", "622253", "622261", "622284", "622656", "628216", "622252", "66405512", "622260", "66601428",
        "955590", "955591", "955592", "955593", "628218", "622262", "621069", "620013", "625028", "625029", "621436", "621002",
        "621335", "433670", "433680", "442729", "442730", "620082", "622690", "622691", "622692", "622696", "622698", "622998",
        "622999", "433671", "968807", "968808", "968809", "621771", "621767", "621768", "621770", "621772", "621773", "620527",
        "356837", "356838", "486497", "622660", "622662", "622663", "622664", "622665", "622666", "622667", "622669", "622670",
        "622671", "622672", "622668", "622661", "622674", "622673", "620518", "621489", "621492", "620535", "623156", "621490",
        "621491", "620085", "623155", "623157", "623158", "623159", "999999", "621222", "623020", "623021", "623022", "623023",
        "622630", "622631", "622632", "622633", "622615", "622616", "622618", "622622", "622617", "622619", "415599", "421393",
        "421865", "427570", "427571", "472067", "472068", "622620", "621691", "545392", "545393", "545431", "545447", "356859",
        "356857", "407405", "421869", "421870", "421871", "512466", "356856", "528948", "552288", "622600", "622601", "622602",
        "517636", "622621", "628258", "556610", "622603", "464580", "464581", "523952", "545217", "553161", "356858", "622623",
        "625911", "377152", "377153", "377158", "377155", "625912", "625913", "356885", "356886", "356887", "356888", "356890",
        "402658", "410062", "439188", "439227", "468203", "479228", "479229", "512425", "521302", "524011", "356889", "545620",
        "545621", "545947", "545948", "552534", "552587", "622575", "622576", "622577", "622579", "622580", "545619", "622581",
        "622582", "622588", "622598", "622609", "690755", "690755", "545623", "621286", "620520", "621483", "621485", "621486",
        "628290", "622578", "370285", "370286", "370287", "370289", "439225", "518710", "518718", "628362", "439226", "628262",
        "625802", "625803", "621299", "966666", "622909", "622908", "438588", "438589", "461982", "486493", "486494", "486861",
        "523036", "451289", "527414", "528057", "622901", "622902", "622922", "628212", "451290", "524070", "625084", "625085",
        "625086", "625087", "548738", "549633", "552398", "625082", "625083", "625960", "625961", "625962", "625963", "356851",
        "356852", "404738", "404739", "456418", "498451", "515672", "356850", "517650", "525998", "622177", "622277", "622516",
        "622517", "622518", "622520", "622521", "622522", "622523", "628222", "628221", "984301", "984303", "622176", "622276",
        "622228", "621352", "621351", "621390", "621792", "625957", "625958", "621791", "620530", "625993", "622519", "621793",
        "621795", "621796", "622500", "623078", "622384", "940034", "940015", "622886", "622391", "940072", "622359", "940066",
        "622857", "940065", "621019", "622309", "621268", "622884", "621453", "622684", "621016", "621015", "622950", "622951",
        "621072", "623183", "623185", "621005", "622172", "622985", "622987", "622267", "622278", "622279", "622468", "622892",
        "940021", "621050", "620522", "356827", "356828", "356830", "402673", "402674", "438600", "486466", "519498", "520131",
        "524031", "548838", "622148", "622149", "622268", "356829", "622300", "628230", "622269", "625099", "625953", "625350",
        "625351", "625352", "519961", "625839", "421317", "602969", "621030", "621420", "621468", "623111", "422160", "422161",
        "622865", "940012", "623131", "622178", "622179", "628358", "622394", "940025", "621279", "622281", "622316", "940022",
        "621418", "512431", "520194", "621626", "623058", "602907", "622986", "622989", "622298", "622338", "940032", "623205",
        "621977", "990027", "622325", "623029", "623105", "621244", "623081", "623108", "566666", "622455", "940039", "622466",
        "628285", "622420", "940041", "623118", "603708", "622993", "623070", "623069", "623172", "623173", "622383", "622385",
        "628299", "603506", "603367", "622878", "623061", "623209", "628242", "622595", "622303", "622305", "621259", "622596",
        "622333", "940050", "621439", "623010", "621751", "628278", "625502", "625503", "625135", "622476", "621754", "622143",
        "940001", "623026", "623086", "628291", "621532", "621482", "622135", "622152", "622153", "622154", "622996", "622997",
        "940027", "623099", "623007", "940055", "622397", "622398", "940054", "622331", "622426", "625995", "621452", "628205",
        "628214", "625529", "622428", "621529", "622429", "621417", "623089", "623200", "940057", "622311", "623119", "622877",
        "622879", "621775", "623203", "603601", "622137", "622327", "622340", "622366", "622134", "940018", "623016", "623096",
        "940049", "622425", "622425", "621577", "622485", "623098", "628329", "621538", "940006", "621269", "622275", "621216",
        "622465", "940031", "621252", "622146", "940061", "621419", "623170", "622440", "940047", "940017", "622418", "623077",
        "622413", "940002", "623188", "622310", "940068", "622321", "625001", "622427", "940069", "623039", "628273", "622370",
        "683970", "940074", "621437", "628319", "990871", "622308", "621415", "623166", "622132", "621340", "621341", "622140",
        "623073", "622147", "621633", "622301", "623171", "621422", "622335", "622336", "622165", "622315", "628295", "625950",
        "621760", "622337", "622411", "623102", "622342", "623048", "622367", "622392", "623085", "622395", "622441", "622448",
        "621413", "622856", "621037", "621097", "621588", "623032", "622644", "623518", "622870", "622866", "623072", "622897",
        "628279", "622864", "621403", "622561", "622562", "622563", "622167", "622777", "621497", "622868", "622899", "628255",
        "625988", "622566", "622567", "622625", "622626", "625946", "628200", "621076", "504923", "622173", "622422", "622447",
        "622131", "940076", "621579", "622876", "622873", "622962", "622936", "623060", "622937", "623101", "621460", "622939",
        "622960", "623523", "621591", "622961", "628210", "622283", "625902", "621010", "622980", "623135", "621726", "621088",
        "620517", "622740", "625036", "621014", "621004", "622972", "623196", "621028", "623083", "628250", "623121", "621070",
        "628253", "622979", "621035", "621038", "621086", "621498", "621296", "621448", "622945", "621755", "622940", "623120",
        "628355", "621089", "623161", "628339", "621074", "621515", "623030", "621345", "621090", "623178", "621091", "623168",
        "621057", "623199", "621075", "623037", "628303", "621233", "621235", "621223", "621780", "621221", "623138", "628389",
        "621239", "623068", "621271", "628315", "621272", "621738", "621273", "623079", "621263", "621325", "623084", "621327",
        "621753", "628331", "623160", "621366", "621388", "621348", "621359", "621360", "621217", "622959", "621270", "622396",
        "622511", "623076", "621391", "621339", "621469", "621625", "623688", "623113", "621601", "621655", "621636", "623182",
        "623087", "621696", "622955", "622478", "940013", "621495", "621688", "623162", "622462", "628272", "625101", "622323",
        "623071", "603694", "622128", "622129", "623035", "623186", "621522", "622271", "940037", "940038", "985262", "622322",
        "628381", "622481", "622341", "940058", "623115", "621258", "621465", "621528", "622328", "940062", "625288", "623038",
        "625888", "622332", "940063", "623123", "622138", "621066", "621560", "621068", "620088", "621067", "622531", "622329",
        "623103", "622339", "620500", "621024", "622289", "622389", "628300", "625516", "621516", "622859", "622869", "623075",
        "622895", "623125", "622947", "621561", "623095", "621073", "623109", "621361", "623033", "623207", "622891", "621363",
        "623189", "623510", "622995", "621053", "621230", "621229", "622218", "628267", "621392", "621481", "621310", "621396",
        "623251", "628351", "623668"
    }

    --"发卡行.卡种名称",
    local bankName = {
        "邮政储蓄银行", "邮政储蓄银行", "邮政储蓄银行", "邮政储蓄银行", "邮政储蓄银行",
        "邮政储蓄银行", "邮政储蓄银行", "邮政储蓄银行", "邮政储蓄银行", "邮政储蓄银行",
        "邮政储蓄银行", "邮政储蓄银行", "邮政储蓄银行", "邮政储蓄银行", "邮政储蓄银行",
        "邮政储蓄银行", "邮政储蓄银行", "邮政储蓄银行", "邮政储蓄银行",
        "邮政储蓄银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "工商银行", "工商银行", "工商银行",
        "中国工商银行", "中国工商银行", "中国工商银行", "中国工商银行", "中国工商银行",
        "工商银行", "工商银行", "中国工商银行", "工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "中国工商银行", "中国工商银行", "中国工商银行",
        "中国工商银行", "中国工商银行", "中国工商银行", "工商银行", "工商银行",
        "工商银行", "工商银行", "中国工商银行", "中国工商银行", "中国工商银行", "中国工商银行",
        "中国工商银行", "中国工商银行", "中国工商银行", "中国工商银行", "中国工商银行",
        "中国工商银行", "工商银行", "中国工商银行", "中国工商银行", "中国工商银行",
        "中国工商银行", "中国工商银行", "中国工商银行", "中国工商银行", "中国工商银行",
        "中国工商银行", "中国工商银行布鲁塞尔分行", "中国工商银行布鲁塞尔分行", "中国工商银行布鲁塞尔分行",
        "中国工商银行", "中国工商银行", "中国工商银行", "中国工商银行", "中国工商银行",
        "中国工商银行", "中国工商银行", "中国工商银行巴黎分行", "中国工商银行巴黎分行", "中国工商银行巴黎分行",
        "中国工商银行", "中国工商银行", "中国工商银行", "中国工商银行", "中国工商银行",
        "中国工商银行", "中国工商银行", "中国工商银行印尼分行", "中国工商银行印尼分行", "中国工商银行米兰分行",
        "中国工商银行米兰分行", "中国工商银行米兰分行", "中国工商银行", "中国工商银行", "中国工商银行",
        "中国工商银行", "中国工商银行万象分行", "中国工商银行万象分行", "中国工商银行卢森堡分行", "中国工商银行卢森堡分行",
        "中国工商银行", "中国工商银行", "中国工商银行", "中国工商银行", "中国工商银行",
        "中国工商银行", "中国工商银行", "中国工商银行", "中国工商银行", "中国工商银行",
        "中国工商银行", "中国工商银行阿姆斯特丹", "中国工商银行", "中国工商银行", "中国工商银行",
        "中国工商银行", "中国工商银行", "中国工商银行", "中国工商银行", "中国工商银行",
        "中国工商银行", "中国工商银行", "中国工商银行", "中国工商银行", "中国工商银行",
        "中国工商银行", "中国工商银行", "中国工商银行", "农业银行", "农业银行", "农业银行",
        "农业银行", "农业银行", "农业银行", "农业银行", "农业银行", "农业银行",
        "农业银行", "农业银行", "农业银行", "农业银行", "农业银行", "农业银行",
        "农业银行", "农业银行", "农业银行", "农业银行", "农业银行", "农业银行",
        "农业银行", "农业银行", "农业银行", "农业银行", "农业银行",
        "农业银行", "农业银行", "农业银行", "农业银行", "农业银行", "农业银行", "农业银行",
        "农业银行", "农业银行", "农业银行", "农业银行", "农业银行", "农业银行",
        "农业银行", "农业银行", "农业银行", "农业银行", "农业银行", "中国农业银行",
        "中国农业银行", "中国农业银行", "中国农业银行", "中国农业银行", "中国农业银行", "中国农业银行",
        "中国农业银行", "中国农业银行", "宁波市农业银行", "中国银行", "中国银行", "中国银行", "中国银行",
        "中国银行", "中国银行", "中国银行", "中国银行", "中国银行", "中国银行", "中国银行",
        "中国银行", "中国银行", "中国银行", "中国银行", "中国银行", "中国银行", "中国银行",
        "中国银行", "中国银行", "中国银行", "中国银行", "中国银行", "中国银行", "中国银行",
        "中国银行", "中国银行", "中国银行", "中国银行", "中国银行", "中国银行",
        "中国银行", "中国银行", "中国银行", "中国银行", "中国银行", "中国银行", "中国银行",
        "中国银行", "中国银行", "中国银行", "中国银行", "中国银行", "中国银行", "中国银行",
        "中国银行", "中国银行", "中国银行", "中国银行", "中国银行", "中国银行", "中国银行", "中国银行",
        "中国银行", "中国银行", "中国银行", "中国银行", "中国银行", "中国银行", "中国银行",
        "中国银行", "中国银行", "中国银行", "中国银行", "中国银行", "中国银行", "中国银行",
        "中国银行", "中国银行", "中国银行", "中国银行", "中国银行", "中国银行", "中国银行", "中国银行",
        "中国银行", "中国银行", "中国银行", "中国银行", "中国银行", "中国银行",
        "中国银行", "中国银行", "中国银行", "中国银行", "中国银行", "中国银行", "中国银行",
        "中国银行", "中国银行", "中国银行", "中国银行", "中国银行", "中国银行", "中国银行",
        "中国银行", "中国银行", "中国银行", "中国银行", "中国银行", "中国银行雅加达分行",
        "中国银行首尔分行", "中国银行", "中国银行", "中国银行", "中国银行", "中国银行",
        "中国银行", "中国银行", "中国银行", "中国银行", "中国银行",
        "中国银行", "中国银行", "中国银行", "中国银行马尼拉分行", "中国银行胡志明分行", "中国银行",
        "中国银行", "中国银行", "建设银行", "建设银行", "建设银行", "建设银行", "建设银行",
        "建设银行", "建设银行", "建设银行", "建设银行", "建设银行", "建设银行", "建设银行", "建设银行",
        "建设银行", "建设银行", "建设银行", "建设银行", "建设银行", "建设银行", "建设银行", "建设银行",
        "建设银行", "建设银行", "建设银行", "建设银行", "建设银行", "建设银行", "建设银行", "建设银行", "建设银行",
        "建设银行", "建设银行", "建设银行", "建设银行", "中国建设银行", "中国建设银行", "中国建设银行",
        "中国建设银行", "中国建设银行", "中国建设银行", "中国建设银行", "中国建设银行", "中国建设银行",
        "中国建设银行", "中国建设银行", "中国建设银行", "中国建设银行", "中国建设银行", "中国建设银行",
        "中国建设银行", "中国建设银行", "中国建设银行", "中国建设银行", "中国建设银行", "中国建设银行",
        "中国建设银行", "中国建设银行", "中国建设银行", "中国建设银行", "中国建设银行", "中国建设银行",
        "中国建设银行", "中国建设银行", "中国建设银行", "交通银行", "交通银行", "交通银行", "交通银行",
        "交通银行", "交通银行", "交通银行", "交通银行", "交通银行", "交通银行",
        "交通银行", "交通银行", "交通银行", "交通银行", "交通银行", "交通银行", "交通银行",
        "交通银行", "交通银行", "交通银行", "交通银行", "交通银行", "交通银行", "交通银行", "交通银行",
        "交通银行", "交通银行", "交通银行", "交通银行", "交通银行", "交通银行", "交通银行",
        "交通银行", "交通银行", "交通银行", "交通银行", "交通银行香港分行", "交通银行香港分行",
        "交通银行香港分行", "交通银行香港分行", "交通银行香港分行", "交通银行香港分行", "交通银行", "中信银行", "中信银行",
        "中信银行", "中信银行", "中信银行", "中信银行", "中信银行", "中信银行", "中信银行",
        "中信银行", "中信银行", "中信银行", "中信银行", "中信银行", "中信银行", "中信银行",
        "中信银行", "中信银行", "中信银行", "中信银行", "中信银行", "中信银行", "中信银行", "光大银行",
        "光大银行", "光大银行", "光大银行", "光大银行", "光大银行", "光大银行", "光大银行",
        "光大银行", "光大银行", "光大银行", "光大银行", "光大银行", "光大银行", "光大银行",
        "光大银行", "光大银行", "光大银行", "光大银行", "光大银行", "光大银行", "光大银行", "光大银行",
        "光大银行", "光大银行", "光大银行", "光大银行", "光大银行", "光大银行", "光大银行", "华夏银行",
        "华夏银行", "华夏银行", "华夏银行", "华夏银行", "华夏银行", "华夏银行", "华夏银行", "华夏银行",
        "华夏银行", "民生银行", "民生银行", "民生银行", "民生银行", "民生银行", "民生银行",
        "民生银行", "民生银行", "民生银行", "民生银行", "民生银行", "民生银行", "民生银行", "民生银行",
        "民生银行", "民生银行", "民生银行", "民生银行", "民生银行", "民生银行", "民生银行", "民生银行",
        "民生银行", "民生银行", "民生银行", "民生银行", "民生银行", "民生银行", "民生银行",
        "民生银行", "民生银行", "民生银行", "民生银行", "民生银行", "民生银行", "民生银行",
        "民生银行", "民生银行", "民生银行", "民生银行", "民生银行", "民生银行", "民生银行",
        "民生银行", "民生银行", "民生银行", "民生银行", "民生银行", "民生银行",
        "民生银行", "民生银行", "招商银行", "招商银行", "招商银行", "招商银行", "招商银行", "招商银行",
        "招商银行", "招商银行", "招商银行", "招商银行", "招商银行", "招商银行", "招商银行",
        "招商银行", "招商银行", "招商银行", "招商银行", "招商银行", "招商银行", "招商银行", "招商银行",
        "招商银行", "招商银行", "招商银行", "招商银行", "招商银行", "招商银行", "招商银行", "招商银行",
        "招商银行", "招商银行", "招商银行", "招商银行", "招商银行", "招商银行", "招商银行", "招商银行", "招商银行",
        "招商银行", "招商银行", "招商银行", "招商银行", "招商银行", "招商银行信用卡中心", "招商银行信用卡中心",
        "招商银行信用卡中心", "招商银行信用卡中心", "招商银行信用卡中心", "招商银行信用卡中心", "招商银行信用卡中心",
        "招商银行信用卡中心", "招商银行信用卡中心", "招商银行信用卡中心", "招商银行信用卡中心", "招商银行信用卡中心",
        "招商银行香港分行", "兴业银行", "兴业银行", "兴业银行", "兴业银行", "兴业银行",
        "兴业银行", "兴业银行", "兴业银行", "兴业银行", "兴业银行", "兴业银行",
        "兴业银行", "兴业银行", "兴业银行", "兴业银行", "兴业银行", "兴业银行", "兴业银行",
        "兴业银行", "兴业银行", "兴业银行", "兴业银行", "兴业银行", "兴业银行", "兴业银行",
        "兴业银行", "兴业银行", "兴业银行", "兴业银行", "兴业银行", "兴业银行", "兴业银行", "浦东发展银行",
        "浦东发展银行", "浦东发展银行", "浦东发展银行", "浦东发展银行", "浦东发展银行", "浦东发展银行", "浦东发展银行",
        "浦东发展银行", "浦东发展银行", "浦东发展银行", "浦东发展银行", "浦东发展银行", "浦东发展银行", "浦东发展银行",
        "浦东发展银行", "浦东发展银行", "浦东发展银行", "浦东发展银行", "浦东发展银行", "浦东发展银行", "浦东发展银行",
        "浦东发展银行", "浦东发展银行", "浦东发展银行", "浦东发展银行", "浦东发展银行", "浦东发展银行", "浦东发展银行",
        "浦东发展银行", "浦东发展银行", "浦东发展银行", "浦东发展银行", "浦东发展银行", "浦东发展银行",
        "浦东发展银行", "浦东发展银行", "浦东发展银行", "浦东发展银行", "浦东发展银行", "恒丰银行",
        "恒丰银行", "恒丰银行", "天津市商业银行", "烟台商业银行", "潍坊银行", "潍坊银行", "临沂商业银行",
        "临沂商业银行", "日照市商业银行", "日照市商业银行", "浙商银行", "浙商银行", "渤海银行", "渤海银行", "渤海银行",
        "渤海银行", "星展银行", "星展银行", "恒生银行", "恒生银行", "新韩银行", "上海银行", "上海银行",
        "上海银行", "上海银行", "上海银行", "上海银行", "上海银行", "上海银行", "上海银行",
        "上海银行", "上海银行", "上海银行", "上海银行", "上海银行", "上海银行", "上海银行", "上海银行",
        "上海银行", "上海银行", "上海银行", "上海银行", "上海银行", "上海银行", "上海银行", "上海银行",
        "上海银行", "上海银行", "上海银行", "上海银行", "上海银行", "上海银行", "上海银行", "上海银行",
        "上海银行", "上海银行", "上海银行", "上海银行", "上海银行", "上海银行", "北京银行",
        "北京银行", "北京银行", "北京银行", "北京银行", "北京银行", "北京银行", "北京银行", "吉林银行",
        "吉林银行", "吉林银行", "吉林银行", "吉林银行", "吉林银行", "镇江市商业银行", "镇江市商业银行",
        "宁波银行", "宁波银行", "宁波银行", "宁波银行", "宁波银行", "宁波银行", "宁波银行",
        "平安银行", "平安银行", "平安银行", "平安银行", "平安银行", "平安银行", "焦作市商业银行",
        "焦作市商业银行", "焦作市商业银行", "温州银行", "汉口银行", "汉口银行", "汉口银行", "汉口银行", "盛京银行",
        "盛京银行", "盛京银行", "盛京银行", "盛京银行", "盛京银行", "盛京银行", "盛京银行", "洛阳银行",
        "洛阳银行", "洛阳银行", "大连银行", "大连银行", "大连银行", "大连银行", "大连银行", "大连银行",
        "大连银行", "大连银行", "大连银行", "苏州市商业银行", "杭州商业银行", "杭州商业银行", "杭州商业银行",
        "杭州商业银行", "南京银行", "南京银行", "南京银行", "南京银行", "南京银行", "南京银行", "东莞市商业银行",
        "东莞市商业银行", "东莞市商业银行", "东莞市商业银行", "乌鲁木齐市商业银行", "乌鲁木齐市商业银行", "乌鲁木齐市商业银行",
        "乌鲁木齐市商业银行", "乌鲁木齐市商业银行", "乌鲁木齐市商业银行", "乌鲁木齐市商业银行", "乌鲁木齐市商业银行",
        "乌鲁木齐市商业银行", "绍兴银行", "绍兴银行", "绍兴银行", "成都商业银行", "成都商业银行", "成都商业银行",
        "成都商业银行", "成都商业银行", "成都商业银行", "成都商业银行", "成都商业银行", "成都商业银行", "抚顺银行",
        "临商银行", "宜昌市商业银行", "宜昌市商业银行", "葫芦岛市商业银行", "葫芦岛市商业银行", "天津市商业银行", "天津市商业银行",
        "天津市商业银行", "天津市商业银行", "天津银行", "宁夏银行", "宁夏银行", "宁夏银行", "宁夏银行", "宁夏银行",
        "宁夏银行", "宁夏银行", "宁夏银行", "齐商银行", "齐商银行", "齐商银行", "徽商银行", "徽商银行", "徽商银行",
        "徽商银行", "徽商银行合肥分行", "徽商银行芜湖分行", "徽商银行马鞍山分行", "徽商银行淮北分行", "徽商银行安庆分行",
        "重庆银行", "重庆银行", "重庆银行", "重庆银行", "哈尔滨银行", "哈尔滨银行", "哈尔滨银行", "哈尔滨银行",
        "无锡市商业银行", "丹东银行", "丹东银行", "兰州银行", "南昌银行", "南昌银行", "南昌银行", "晋商银行",
        "晋商银行", "晋商银行", "青岛银行", "青岛银行", "青岛银行", "青岛银行", "青岛银行", "吉林银行",
        "吉林银行", "南通商业银行", "南通商业银行", "日照银行", "鞍山银行", "鞍山银行", "鞍山银行",
        "青海银行", "青海银行", "台州银行", "台州银行", "台州银行", "台州银行", "台州银行", "台州银行",
        "泉州银行", "泉州银行", "泉州银行", "泉州银行", "泉州银行", "昆明商业银行", "昆明商业银行",
        "昆明商业银行", "阜新银行", "嘉兴银行", "廊坊银行", "廊坊银行", "廊坊银行", "廊坊银行", "内蒙古银行",
        "内蒙古银行", "湖州市商业银行", "湖州市商业银行", "沧州银行", "南宁市商业银行", "包商银行", "包商银行", "包商银行",
        "包商银行", "包商银行", "包商银行", "连云港市商业银行", "威海商业银行", "威海市商业银行", "攀枝花市商业银行",
        "攀枝花市商业银行", "绵阳市商业银行", "泸州市商业银行", "泸州市商业银行", "大同市商业银行", "三门峡银行", "广东南粤银行",
        "张家口市商业银行", "桂林市商业银行", "龙江银行", "龙江银行", "龙江银行", "龙江银行", "龙江银行", "龙江银行",
        "江苏长江商业银行", "徐州市商业银行", "南充市商业银行", "南充市商业银行", "莱商银行", "莱芜银行", "莱商银行", "德阳银行",
        "德阳银行", "德阳银行", "唐山市商业银行", "曲靖市商业银行", "曲靖市商业银行", "温州银行", "温州银行",
        "温州银行", "温州银行", "汉口银行", "汉口银行", "汉口银行", "汉口银行", "汉口银行", "汉口银行",
        "江苏银行", "江苏银行", "江苏银行", "江苏银行", "江苏银行", "江苏银行", "江苏银行", "江苏银行",
        "江苏银行", "江苏银行", "长治市商业银行", "承德市商业银行", "承德银行", "德州银行", "德州银行", "遵义市商业银行",
        "遵义市商业银行", "邯郸市商业银行", "邯郸市商业银行", "安顺市商业银行", "安顺市商业银行", "江苏银行", "江苏银行",
        "江苏银行", "平凉市商业银行", "玉溪市商业银行", "玉溪市商业银行", "浙江民泰商业银行", "浙江民泰商业银行", "浙江民泰商业银行",
        "浙江民泰商业银行", "浙江民泰商业银行", "上饶市商业银行", "东营银行", "泰安市商业银行", "泰安市商业银行", "浙江稠州商业银行",
        "浙江稠州商业银行", "浙江稠州商业银行", "自贡市商业银行", "自贡市商业银行", "鄂尔多斯银行", "鹤壁银行", "许昌银行", "铁岭银行",
        "乐山市商业银行", "乐山市商业银行", "长安银行", "长安银行", "重庆三峡银行", "重庆三峡银行", "石嘴山银行", "石嘴山银行",
        "石嘴山银行", "盘锦市商业银行", "盘锦市商业银行", "平顶山银行", "朝阳银行", "朝阳银行", "朝阳银行", "宁波东海银行",
        "遂宁市商业银行", "遂宁是商业银行", "保定银行", "保定银行", "凉山州商业银行", "凉山州商业银行", "漯河银行", "漯河银行", "漯河银行",
        "达州市商业银行", "新乡市商业银行", "晋中银行", "晋中银行", "驻马店银行", "驻马店银行", "驻马店银行", "衡水银行", "衡水银行",
        "周口银行", "周口银行", "阳泉市商业银行", "阳泉市商业银行", "宜宾市商业银行", "宜宾市商业银行", "库尔勒市商业银行", "雅安市商业银行",
        "雅安市商业银行", "安阳银行", "信阳银行", "信阳银行", "信阳银行", "华融湘江银行", "华融湘江银行", "营口沿海银行", "景德镇商业银行",
        "哈密市商业银行", "湖北银行", "湖北银行", "湖北银行", "湖北银行", "湖北银行", "湖北银行", "西藏银行", "新疆汇和银行",
        "广东华兴银行", "广东华兴银行", "广东华兴银行", "广东华兴银行", "濮阳银行", "宁波通商银行", "甘肃银行",
        "甘肃银行", "枣庄银行", "本溪市商业银行", "盛京银行", "上海农商银行", "上海农商银行", "上海农商银行",
        "上海农商银行", "上海农商银行", "常熟市农村商业银行", "常熟市农村商业银行", "常熟市农村商业银行", "常熟农村商业银行",
        "常熟农村商业银行", "常熟农村商业银行", "深圳农村商业银行", "深圳农村商业银行", "深圳农村商业银行", "深圳农村商业银行",
        "广州农村商业银行", "广东南海农村商业银行", "广东南海农村商业银行", "佛山顺德农村商业银行", "佛山顺德农村商业银行",
        "佛山顺德农村商业银行", "江阴农村商业银行", "江阴市农村商业银行", "江阴农村商业银行", "江阴农村商业银行",
        "江阴农村商业银行", "重庆农村商业银行", "重庆农村商业银行", "重庆农村商业银行", "东莞农村商业银行",
        "东莞农村商业银行", "东莞农村商业银行", "东莞农村商业银行", "东莞农村商业银行", "张家港农村商业银行",
        "张家港农村商业银行", "张家港农村商业银行", "北京农村商业银行", "北京农村商业银行", "北京农村商业银行", "北京农村商业银行",
        "北京农村商业银行", "北京农村商业银行", "天津农村商业银行", "天津农村商业银行", "天津农村商业银行",
        "鄞州农村合作银行", "宁波鄞州农村合作银行", "宁波鄞州农村合作银行", "宁波鄞州农村合作银行", "宁波鄞州农村合作银行",
        "宁波鄞州农村合作银行", "成都农村商业银行", "成都农村商业银行", "珠海农村商业银行", "太仓农村商业银行", "太仓农村商业银行",
        "无锡农村商业银行", "无锡农村商业银行", "黄河农村商业银行", "黄河农村商业银行", "黄河农村商业银行", "天津滨海农村商业银行",
        "天津滨海农村商业银行", "武汉农村商业银行", "武汉农村商业银行", "武汉农村商业银行", "江南农村商业银行", "江南农村商业银行",
        "江南农村商业银行", "海口联合农村商业银行", "湖北嘉鱼吴江村镇银行", "福建建瓯石狮村镇银行", "浙江平湖工银村镇银行", "重庆璧山工银村镇银行",
        "重庆农村商业银行", "重庆农村商业银行", "南阳村镇银行", "晋中市榆次融信村镇银行", "三水珠江村镇银行", "东营莱商村镇银行", "建设银行",
        "玉溪市商业银行", "娄底建设银行"
    }


    local index = -1

    if (idCard == nil) or (string.len(idCard) < 16) or (string.len(idCard) > 19) then
        return ""
    end

    --6位Bin号
    local cardbin_6 = string.sub(idCard, 1, 6)
    for i = 1, table.maxn(bankBin), 1 do
        if cardbin_6 == bankBin[i] then
            index = i
        end
    end
    
    if index ~= -1 then
        return bankName[index]
    end

    --8位Bin号
    local cardbin_8 = string.sub(idCard, 1, 8)
    for i = 1, table.maxn(bankBin), 1 do
        if cardbin_8 == bankBin[i] then
            index = i
        end
    end
    
    if index ~= -1 then
        return bankName[index]
    end

    return "";
end

--获取version json配置链接
function UtilTool:getVersionJsonUrl()
    --根据包名设置渠道号
    local strVersionJsonUrl = ""

    strVersionJsonUrl = strVersionJsonUrl .. "?" .. tostring(math.floor(os.time()/300))

    return strVersionJsonUrl
end


return UtilTool