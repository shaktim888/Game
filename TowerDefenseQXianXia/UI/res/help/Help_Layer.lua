--------------------------------------------------------------
-- This file was automatically generated by Cocos Studio.
-- Do not make changes to this file.
-- All changes will be lost.
--------------------------------------------------------------

local luaExtend = require "LuaExtend"

-- using for layout to decrease count of local variables
local layout = nil
local localLuaFile = nil
local innerCSD = nil
local innerProject = nil
local localFrame = nil

local Result = {}
------------------------------------------------------------
-- function call description
-- create function caller should provide a function to 
-- get a callback function in creating scene process.
-- the returned callback function will be registered to 
-- the callback event of the control.
-- the function provider is as below :
-- Callback callBackProvider(luaFileName, node, callbackName)
-- parameter description:
-- luaFileName  : a string, lua file name
-- node         : a Node, event source
-- callbackName : a string, callback function name
-- the return value is a callback function
------------------------------------------------------------
function Result.create(callBackProvider)

local result={}
setmetatable(result, luaExtend)

--Create Layer
local Layer=cc.Node:create()
Layer:setName("Layer")
layout = ccui.LayoutComponent:bindLayoutComponent(Layer)
layout:setSize({width = 1280.0000, height = 720.0000})

--Create panel
local panel = ccui.Layout:create()
panel:ignoreContentAdaptWithSize(false)
panel:setClippingEnabled(false)
panel:setBackGroundColorType(1)
panel:setBackGroundColor({r = 0, g = 0, b = 0})
panel:setBackGroundColorOpacity(153)
panel:setTouchEnabled(true);
panel:setLayoutComponentEnabled(true)
panel:setName("panel")
panel:setTag(3030)
panel:setCascadeColorEnabled(true)
panel:setCascadeOpacityEnabled(true)
layout = ccui.LayoutComponent:bindLayoutComponent(panel)
layout:setPercentWidth(1.0000)
layout:setPercentHeight(1.0000)
layout:setSize({width = 1280.0000, height = 720.0000})
layout:setHorizontalEdge(3)
layout:setVerticalEdge(3)
layout:setStretchWidthEnabled(true)
layout:setStretchHeightEnabled(true)
Layer:addChild(panel)

--Create bg
local bg = ccui.ImageView:create()
bg:ignoreContentAdaptWithSize(false)
bg:loadTexture("common/img_pop_bg.png",0)
bg:setLayoutComponentEnabled(true)
bg:setName("bg")
bg:setTag(3031)
bg:setCascadeColorEnabled(true)
bg:setCascadeOpacityEnabled(true)
bg:setPosition(630.0000, 331.9840)
layout = ccui.LayoutComponent:bindLayoutComponent(bg)
layout:setPositionPercentX(0.4922)
layout:setPositionPercentY(0.4611)
layout:setPercentWidth(0.6930)
layout:setPercentHeight(0.7708)
layout:setSize({width = 887.0000, height = 555.0000})
layout:setHorizontalEdge(3)
layout:setVerticalEdge(3)
layout:setLeftMargin(186.5000)
layout:setRightMargin(206.5000)
layout:setTopMargin(110.5160)
layout:setBottomMargin(54.4840)
panel:addChild(bg)

--Create scrollView_rule
local scrollView_rule = ccui.ScrollView:create()
scrollView_rule:setInnerContainerSize({width = 600, height = 580})
scrollView_rule:ignoreContentAdaptWithSize(false)
scrollView_rule:setClippingEnabled(true)
scrollView_rule:setBackGroundColorOpacity(51)
scrollView_rule:setLayoutComponentEnabled(true)
scrollView_rule:setName("scrollView_rule")
scrollView_rule:setTag(3032)
scrollView_rule:setCascadeColorEnabled(true)
scrollView_rule:setCascadeOpacityEnabled(true)
scrollView_rule:setPosition(350.0000, 130.0000)
layout = ccui.LayoutComponent:bindLayoutComponent(scrollView_rule)
layout:setPositionPercentX(0.2734)
layout:setPositionPercentY(0.1806)
layout:setPercentWidth(0.4688)
layout:setPercentHeight(0.5556)
layout:setSize({width = 600.0000, height = 400.0000})
layout:setLeftMargin(350.0000)
layout:setRightMargin(330.0000)
layout:setTopMargin(190.0000)
layout:setBottomMargin(130.0000)
panel:addChild(scrollView_rule)

--Create text_rule
local text_rule = ccui.Text:create()
text_rule:ignoreContentAdaptWithSize(false)
text_rule:setFontName("")
text_rule:setFontSize(28)
text_rule:setString([[       这是一款着重着色的放置游戏，指尖掌握战略，创新玩法与修仙的背景故事相结合，打造了恢弘壮阔的仙侠世界，体验不一样的仙侠风。
     【唯美天庭 由你守护】
魔族大举入侵，守护南天门的重担就交到你手上了！
     【放置挂机 休闲轻松】
塔防挂机，策略无限，动动你的大脑，懒人放置的最佳选择！
     【精美画面 免费下载】
马上体验，即刻获得入驻天庭的资格吧！]])
text_rule:setLayoutComponentEnabled(true)
text_rule:setName("text_rule")
text_rule:setTag(3033)
text_rule:setCascadeColorEnabled(true)
text_rule:setCascadeOpacityEnabled(true)
text_rule:setAnchorPoint(0.0000, 1.0000)
text_rule:setPosition(0.0000, 580.0000)
text_rule:setTextColor({r = 0, g = 0, b = 0})
layout = ccui.LayoutComponent:bindLayoutComponent(text_rule)
layout:setPositionPercentY(1.0000)
layout:setPercentWidth(1.0000)
layout:setPercentHeight(0.6897)
layout:setSize({width = 600.0000, height = 400.0000})
layout:setBottomMargin(180.0000)
scrollView_rule:addChild(text_rule)

--Create Animation
result['animation'] = ccs.ActionTimeline:create()
  
result['animation']:setDuration(0)
result['animation']:setTimeSpeed(1.0000)
--Create Animation List

result['root'] = Layer
return result;
end

return Result

